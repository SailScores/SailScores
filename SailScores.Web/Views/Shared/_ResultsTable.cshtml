@using SailScores.Web.Models.SailScores
@using SailScores.Core.Model
@using SailScores.Core.FlatModel
@using SailScores.Api.Enumerations
@using Microsoft.Extensions.Localization
@using SailScores.Web.Resources
@using SailScores.Web.Services

@inject IStringLocalizer<SharedResource> localizer
@inject IWeatherService weatherService

@model Series
@{
    bool NoCompetitors = false;
}

@if (Model != null)
{
    <div class="table-responsive-sm">
        <table class="table table-hover table-sm">
            <thead>
                <tr>
                    <th scope="col">@localizer["Place"]</th>
                    @if ((Model.TrendOption ?? TrendOption.None) != TrendOption.None
                        && !((bool?)ViewData["IsExport"] ?? false))
                    {
                        <th scope="col" class="d-none d-sm-table-cell">@localizer["Change"]*</th>
                    }
                    <th scope="col">@localizer["Sail"]</th>
                    <th scope="col">@localizer["Helm"]</th>
                    <th scope="col" class="d-none d-sm-table-cell">@localizer["Boat"]</th>
                    @if (Model.ShowCompetitorClub ?? false)
                    {
                        <th scope="col" class="d-none d-sm-table-cell">@localizer["Club"]</th>
                    }
                    <th scope="col" class="text-center">@localizer["Total"]</th>
                    @{ var colCount = 0;}
                    @foreach (var race in Model.FlatResults?.Races ?? Enumerable.Empty<FlatRace>())
                    {
                        if (race.State == RaceState.Abandoned || race.State == RaceState.Scheduled)
                        {
                <th class="text-center d-none d-sm-table-cell">
                    @if (((bool?)ViewData["IsExport"] ?? false))
                    {
                        @race.ShortName
                    }
                    else
                    {
                        @Html.ActionLink(
                                     @race.ShortName
                                     , "Details", "Race", new { id = race.Id })
                        <div class="weather">
                            @if (race.WindDirectionDegrees.HasValue)
                            {
                                <i class="wi wi-wind from-@race.WindDirectionDegrees?.ToString("N0")-deg ss-wi" data-toggle="tooltip" title="@race.WindDirectionDegrees?.ToString("N0")°"></i>
                            }
                            @if (!string.IsNullOrWhiteSpace(race.WindSpeed))
                            {<span data-toggle="tooltip" title="mph">@race.WindSpeed</span>}
                            @if (!string.IsNullOrWhiteSpace(race.WeatherIcon))
                            {
                                <i class="wi @weatherService.GetIconCharacter(race.WeatherIcon) ss-wi"></i>
                            }
                        </div>
                    }

                </th>
                        }
                        else
                        {
                <th class="text-center">
                    @if (((bool?)ViewData["IsExport"] ?? false))
                    {
                        @race.ShortName
                    }
                    else
                    {
                        @Html.ActionLink(
                            @race.ShortName
                            , "Details", "Race", new { id = race.Id })
                        <br />
                        <div class="weather">
                            @if (race.WindDirectionDegrees.HasValue)
                            {
                                <i class="wi wi-wind from-@race.WindDirectionDegrees?.ToString("N0")-deg ss-wi" data-toggle="tooltip" title="@race.WindDirectionDegrees?.ToString("N0")°"></i>
                            }
                            @if (!string.IsNullOrWhiteSpace(race.WindSpeed))
                            {<span data-toggle="tooltip" title="mph">@race.WindSpeed</span>}
                            @if (!string.IsNullOrWhiteSpace(race.WeatherIcon))
                            {
                                <i class="wi @weatherService.GetIconCharacter(race.WeatherIcon) ss-wi"></i>
                            }
                        </div>
                    }
                </th>
                        }
                        if (++colCount % 25 == 0 && (Model.FlatResults.NumberOfSailedRaces - colCount) > 10)
                        {
                            <th scope="col">@localizer["Helm"]</th>
                        }
                    }
                    @if ((Model.FlatResults.NumberOfSailedRaces) > 4)
                    {
                        <th scope="col" class="d-table-cell @((Model.FlatResults.NumberOfSailedRaces < 25)?"d-md-none":"")">
                            @localizer["Helm"]
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @{ var firstRow = true;
                    var compList = Model.FlatResults?.Competitors;
                    if (compList == null || compList.Count() == 0)
                    {
                        compList = new List<FlatCompetitor>{
                        new FlatCompetitor {
                            Name= localizer["No competitors"]}
                        };
                        NoCompetitors = true;
                    }
                }
                @{ var cellViewData = new ViewDataDictionary(ViewData)
                                               {{ "IsPercentSystem", Model.FlatResults.IsPercentSystem }};
                }
                @foreach (var comp in compList)
                {
                    colCount = 0;
                <tr>
                    <th scope="row">@Model.FlatResults.GetScore(comp)?.Rank</th>
                    @if ((Model.TrendOption ?? TrendOption.None) != TrendOption.None
                        && !((bool?)ViewData["IsExport"] ?? false))
                    {
                        <th scope="row" class="d-none d-sm-table-cell">
                            @if (Model.FlatResults.GetScore(comp)?.Trend > 0)
                            {
                                <span class="text-success">
                                    <span class="fas fa-arrow-up"></span>
                                    @Model.FlatResults.GetScore(comp).Trend.Value
                                </span>
                            }
                            else if (Model.FlatResults.GetScore(comp)?.Trend < 0)
                            {
                                <span class="text-danger">
                                    <span class="fas fa-arrow-down"></span>
                                    @Math.Abs(Model.FlatResults.GetScore(comp).Trend.Value)
                                </span>
                            }

                        </th>
                    }
                    <th scope="row">
                        @if ((Model.PreferAlternativeSailNumbers ?? false)
                         && !String.IsNullOrWhiteSpace(comp.AlternativeSailNumber))
                        {
                            @comp.AlternativeSailNumber
                        }
                        else
                        {
                            @comp.SailNumber
                        }
                    </th>
                    <th scope="row">
                        @if (((bool?)ViewData["IsExport"] ?? false) || ((bool?)ViewData["IsRegatta"] ?? false) || NoCompetitors)
                        {
                            @comp.Name
                        }
                        else
                        {
                            <a asp-route="Competitor" asp-route-sailNumber="@comp.CurrentSailNumber">@comp.Name</a>
                        }
                    </th>
                    <td class="d-none d-sm-table-cell">@comp.BoatName</td>
                    @if (Model.ShowCompetitorClub ?? false)
                    {
                        <td class="d-none d-sm-table-cell">@comp.HomeClubName</td>
                    }
                    <td scope="row" class="text-center">
                        <strong>
                            @String.Format("{0:0.##}", Model.FlatResults.GetScore(comp)?.TotalScore)

                            @if (Model.FlatResults.IsPercentSystem &&
                  Model.FlatResults.GetScore(comp)?.TotalScore != null)
                            {
                                <br />
                                <span class="small">
                                    (@Model.FlatResults.GetScore(comp).PointsEarned /
                                    @Model.FlatResults.GetScore(comp).PointsPossible.Value.ToString("N0"))
                                </span>
                            }
                        </strong>
                    </td>

                    @foreach (var race in Model.FlatResults.Races)
                    {
                        if (race.State == RaceState.Abandoned)
                        {
                            if (firstRow)
                            {
                                <td rowspan="@(Model.FlatResults?.Competitors?.Count() ?? 1)" class="abandoned d-none d-sm-table-cell">
                                    <span>ABANDONED</span>
                                </td>
                            }
                        }
                        else if (race.State == RaceState.Scheduled)
                        {
                            if (firstRow)
                            {
                                <td rowspan="@(Model.FlatResults?.Competitors?.Count() ?? 1)" class="scheduled d-none d-sm-table-cell">
                                    <span>SCHEDULED</span>
                                </td>
                            }
                        }
                        else
                        {
                            var result = Model.FlatResults.GetScore(comp, race);

                            @await Html.PartialAsync("_ScoreCell", result, cellViewData)
                        }
                        if (++colCount % 25 == 0 && (Model.FlatResults.NumberOfSailedRaces - colCount) > 10)
                        {
                            <td>@comp.Name</td>
                        }
                    }
                    @if ((Model.FlatResults.NumberOfSailedRaces) > 4)
                    {
                        <th class="d-table-cell @(( Model.FlatResults.NumberOfSailedRaces < 25)?"d-md-none":"")">@comp.Name</th>
                    }
                    @{firstRow = false;
                    }
                </tr>
                }
            </tbody>
        </table>
        <div class="row">
            <div class="col-md-9">
                @if ((Model.TrendOption ?? TrendOption.None) != TrendOption.None
                    && !((bool?)ViewData["IsExport"] ?? false))
                {
                    <span class="d-none d-sm-inline">
                        * @localizer["Rank change from"] @localizer[EnumHelper<TrendOption>.GetDisplayValue(Model.TrendOption.Value)]
                    </span>
                }
            </div>
            <div class="col-md-3 text-right">
                @if(!((bool?)ViewData["IsExport"] ?? false))
                { 
                    <a class="btn btn-outline-secondary btn-sm"
                       asp-action="ExportHtml"
                       asp-controller="Series"
                       asp-route-id="@Model.Id"
                       title="Export as HTML">
                        <span class="fas fa-2x fa-file-code"></span>
                    </a>
                    <a class="btn btn-outline-secondary btn-sm"
                       asp-action="ExportCsv"
                       asp-controller="Series"
                       asp-route-id="@Model.Id"
                       title="Export as CSV">
                        <span class="fas fa-2x fa-file-csv"></span>
                    </a>
                }
            </div>
        </div>
    </div>
}
else
{
    <div></div>
}