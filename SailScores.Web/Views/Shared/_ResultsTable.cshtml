@using SailScores.Core.Model
@using SailScores.Core.FlatModel
@using SailScores.Api.Enumerations
@using Microsoft.Extensions.Localization
@using SailScores.Core.Services;
@using SailScores.Web.Resources
@using SailScores.Web.Services
@using SailScores.Web.Services.Interfaces

@inject IStringLocalizer<SharedResource> localizer
@inject IWeatherService weatherService

@model Series
@{
    bool NoCompetitors = false;
    var results = Model.FlatResults;
}

@if (Model != null)
{
    if (results.IsPreliminary ?? false)
    {
        <div><strong><span class="text-warning">Results are preliminary.</span> Protests may be pending.</strong></div>
    }
    <div class="table-responsive-sm">
        <table class="table table-hover table-sm mb-1 " summary="Results for series">
            <thead>
                <tr>
                    <th scope="col">@localizer["Place"]</th>
                    @if ((Model.TrendOption ?? TrendOption.None) != TrendOption.None
                      && (results?.Races?.DefaultIfEmpty().Max(r => r?.Date ?? DateTime.MinValue) ?? DateTime.MinValue)
                          > DateTime.Today.AddMonths(-1)
                      && !((bool?)ViewData["IsExport"] ?? false))
                    {
                        <th scope="col" class="d-none d-sm-table-cell">@localizer["Change"]*</th>
                    }
                    <th scope="col">@localizer["Sail"]</th>
                    <th scope="col">@localizer["Helm"]</th>
                    <th scope="col" class="d-none d-sm-table-cell">@localizer["Boat"]</th>
                    @if (Model.ShowCompetitorClub ?? false)
                    {
                        <th scope="col" class="d-none d-sm-table-cell">@localizer["Club"]</th>
                    }
                    <th scope="col" class="text-center">@localizer["Total"]</th>
                    @{
                        var colCount = 0;
                        var needCompNameColumn = false;
                        DateTime? prevRaceDate = null;
                    }
                    @foreach (var race in results?.Races ?? Enumerable.Empty<FlatRace>())
                    {
                        ++colCount;
                        if (!needCompNameColumn)
                        {
                            needCompNameColumn = colCount % 23 == 20 && (results.NumberOfSailedRaces - colCount) > 10;
                        }
                        if (needCompNameColumn && (race.Date != prevRaceDate || colCount % 23 == 4 ))
                        {
                            needCompNameColumn = false;
                            <th scope="col">@localizer["Helm"]</th>
                        }
                        if (race.State == RaceState.Abandoned || race.State == RaceState.Scheduled)
                        {
                            <th class="text-center d-none d-sm-table-cell" scope="col">
                                @if (((bool?)ViewData["IsExport"] ?? false))
                                {
                                    @race.ShortName
                                }
                                else
                                {
                                    @Html.ActionLink(
                                                 @race.ShortName
                                                 , "Details", "Race", new { id = race.Id })
                                    <div class="weather">
                                        @if (race.WindDirectionDegrees.HasValue)
                                        {
                                            <span class="wi wi-wind from-@race.WindDirectionDegrees?.ToString("N0")-deg ss-wi" data-toggle="tooltip" title="@race.WindDirectionDegrees?.ToString("N0")°"></span>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(race.WindSpeed))
                                        {<span data-toggle="tooltip" title="@race.WindSpeedUnits">@race.WindSpeed</span>}
                                        @if (!string.IsNullOrWhiteSpace(race.WeatherIcon))
                                        {
                                            <span class="wi @weatherService.GetIconCharacter(race.WeatherIcon) ss-wi"></span>
                                        }
                                    </div>
                                }

                            </th>
                        }
                        else
                        {
                            <th class="text-center" scope="col">
                                @if (((bool?)ViewData["IsExport"] ?? false))
                                {
                                    @race.ShortName
                                }
                                else
                                {
                                    <a asp-controller="Race"
                                       asp-action="Details"
                                       asp-route-id="@race.Id"
                                       class=" @(race.State == RaceState.Preliminary ? "text-warning" : "")">@race.ShortName</a>
                                    <br />
                                    <div class="weather">
                                        @if (race.WindDirectionDegrees.HasValue)
                                        {
                                            <span class="wi wi-wind from-@race.WindDirectionDegrees?.ToString("N0")-deg ss-wi" data-toggle="tooltip" title="@race.WindDirectionDegrees?.ToString("N0")°"></span>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(race.WindSpeed))
                                        {<span data-toggle="tooltip" title="@race.WindSpeedUnits">@race.WindSpeed</span>}
                                        @if (!string.IsNullOrWhiteSpace(race.WeatherIcon))
                                        {
                                            <span class="wi @weatherService.GetIconCharacter(race.WeatherIcon) ss-wi"></span>
                                        }
                                    </div>
                                }
                            </th>
                        }
                        prevRaceDate = race.Date;
                    }
                    @if ((results.NumberOfSailedRaces) > 4)
                    {
                        <th scope="col" class="d-table-cell @((results.NumberOfSailedRaces < 25)?"d-md-none":"")">
                            @localizer["Helm"]
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @{ var firstRow = true;
                    var compList = results?.Competitors;
                    if ((compList?.Count() ?? 0) == 0)
                    {
                        compList = new List<FlatCompetitor>{
                        new FlatCompetitor {
                            Name= localizer["No competitors"]}
                        };
                        NoCompetitors = true;
                    }
                }
                @{ var cellViewData = new ViewDataDictionary(ViewData) {
                       { "IsPercentSystem", results.IsPercentSystem },
                       { "ScoreCodesUsed", results.ScoreCodesUsed } };
                }
                @foreach (var comp in compList)
                {
                    colCount = 0;
                <tr>
                    <th scope="row">@results.GetScore(comp)?.Rank</th>
                    @if ((Model.TrendOption ?? TrendOption.None) != TrendOption.None
                    && (results?.Races?.DefaultIfEmpty().Max(r => r?.Date ?? DateTime.MinValue) ?? DateTime.MinValue)
                        > DateTime.Today.AddMonths(-1)
                    && !((bool?)ViewData["IsExport"] ?? false))
                    {
                        <th scope="row" class="d-none d-sm-table-cell">
                            @if (results.GetScore(comp)?.Trend > 0)
                            {
                                <span class="text-success">
                                    <span class="fas fa-arrow-up"></span>
                                    @results.GetScore(comp).Trend.Value
                                </span>
                            }
                            else if (results.GetScore(comp)?.Trend < 0)
                            {
                                <span class="text-danger">
                                    <span class="fas fa-arrow-down"></span>
                                    @Math.Abs(results.GetScore(comp).Trend.Value)
                                </span>
                            }

                        </th>
                    }
                    <th scope="row">
                        @if ((Model.PreferAlternativeSailNumbers ?? false)
                     && !String.IsNullOrWhiteSpace(comp.AlternativeSailNumber))
                        {
                            @comp.AlternativeSailNumber
                        }
                        else
                        {
                            @comp.SailNumber
                        }
                    </th>
                    <th scope="row">
                        @if (((bool?)ViewData["IsExport"] ?? false)
                        || ((bool?)ViewData["ExcludeCompetitorLinks"] ?? false) || NoCompetitors)
                        {
                            @comp.Name
                        }
                        else
                        {

                            <a asp-route="Competitor"
                                   asp-route-sailNumber="@(comp.CurrentSailNumber ?? UrlUtility.GetUrlName(comp.Name))"
                               asp-route-clubInitials="@ViewContext.RouteData.Values["ClubInitials"]">@comp.Name</a>
                        }
                    </th>
                    <td class="d-none d-sm-table-cell">@comp.BoatName</td>
                    @if (Model.ShowCompetitorClub ?? false)
                    {
                        <td class="d-none d-sm-table-cell">@comp.HomeClubName</td>
                    }
                    <td scope="row" class="text-center">
                        <strong>
                            @String.Format("{0:0.##}", results.GetScore(comp)?.TotalScore)

                            @if (results.IsPercentSystem &&
              results.GetScore(comp)?.TotalScore != null)
                            {
                                <br />
                                <span class="small">
                                    (@results.GetScore(comp).PointsEarned /
                                    @results.GetScore(comp).PointsPossible.Value.ToString("N0"))
                                </span>
                            }
                        </strong>
                    </td>
                    @{
                        colCount = 0;
                        needCompNameColumn = false;
                        prevRaceDate = null;
                    }
                    @foreach (var race in results.Races)
                    {
                        ++colCount;
                        if (!needCompNameColumn)
                        {
                            needCompNameColumn = colCount % 23 == 20 && (results.NumberOfSailedRaces - colCount) > 10;
                        }
                        if (needCompNameColumn && (race.Date != prevRaceDate || colCount % 23 == 4))
                        {
                            needCompNameColumn = false;
                            <td>@comp.Name</td>

                        }
                        if (race.State == RaceState.Abandoned)
                        {
                            if (firstRow)
                            {
                                <td rowspan="@(results?.Competitors?.Count() ?? 1)" class="abandoned d-none d-sm-table-cell">
                                    <span>ABANDONED</span>
                                </td>
                            }
                        }
                        else if (race.State == RaceState.Scheduled)
                        {
                            if (firstRow)
                            {
                                <td rowspan="@(results?.Competitors?.Count() ?? 1)" class="scheduled d-none d-sm-table-cell">
                                    <span>SCHEDULED</span>
                                </td>
                            }
                        }
                        else
                        {
                            var result = results.GetScore(comp, race);

                            @await Html.PartialAsync("_ScoreCell", new ScoreCellViewModel
                       {
                           Result = result,
                           IsPercentSystem = results.IsPercentSystem,
                           ScoreCodesUsed = results.ScoreCodesUsed
                       })
                        }
                        prevRaceDate = race.Date;
                    }
                    @if ((results.NumberOfSailedRaces) > 4)
                    {
                        <th class="d-table-cell @(( results.NumberOfSailedRaces < 25)?"d-md-none":"")"
                            scope="row">@comp.Name</th>
                        }
                    @{
                        firstRow = false;
                    }
                </tr>
                        }
            </tbody>
        </table>
        <div class="row">
            <div class="col-md-9">
                @if ((Model.TrendOption ?? TrendOption.None) != TrendOption.None
                    && (results?.Races?.DefaultIfEmpty().Max(r => r?.Date ?? DateTime.MinValue) ?? DateTime.MinValue)
                    > DateTime.Today.AddMonths(-1)
                    && !((bool?)ViewData["IsExport"] ?? false))
                {
                    <span class="d-none d-sm-inline">
                        * @localizer["Rank change from"] @localizer[EnumHelper<TrendOption>.GetDisplayValue(Model.TrendOption.Value)]
                    </span>
                }
            @if (Model.UpdatedDate.HasValue)
            {
                <span class="small font-italic">
                    @localizer["Updated"] @(Model.UpdatedDate.Value.ToString("f")) UTC
                    @if (!String.IsNullOrWhiteSpace(Model.FlatResults.UpdatedBy))
                    {
                        @:by @Model.FlatResults.UpdatedBy
                    }
                </span>
            }
            </div>
            <div class="col-md-3 text-right">
                @if (!((bool?)ViewData["IsExport"] ?? false))
                {
                    <a class="btn btn-outline-secondary btn-sm"
                       asp-action="ExportHtml"
                       asp-controller="Series"
                       asp-route-id="@Model.Id"
                       title="Export as HTML">
                        <span class="fas fa-2x fa-file-code"></span>
                    </a>
                    <a class="btn btn-outline-secondary btn-sm"
                       asp-action="ExportCsv"
                       asp-controller="Series"
                       asp-route-id="@Model.Id"
                       title="Export as CSV">
                        <span class="fas fa-2x fa-file-csv"></span>
                    </a>
                }
            </div>
        </div>
    </div>
}
else
{
    <div></div>
}