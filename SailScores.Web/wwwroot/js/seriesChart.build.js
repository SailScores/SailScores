var SailScores=function(t){var e={};function a(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,a),n.l=!0,n.exports}return a.m=t,a.c=e,a.d=function(t,e,r){a.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},a.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="/js/",a(a.s=0)}([function(t,e){function a(t,e){var a=e.races.find(e=>e.id===t.raceId),r=e.races.filter(t=>t.date===a.date);if(1===a.length)return new Date(a.date);var n=r.findIndex(t=>t.id===a.id);return new Date(new Date(a.date).getTime()+24*n*60*60*1e3/r.length)}function r(t,e){var a=Math.max(...e.entries.filter(e=>e.raceId===t.raceId).map(t=>t.seriesPoints)),r=Math.min(...e.entries.filter(e=>e.raceId===t.raceId&&0!==e.seriesPoints).map(t=>t.seriesPoints)),n=(t.seriesPoints-r)/(a-r);return 0===t.seriesPoints&&(n=1),margin+n*(chartOverallHeight-margin-margin)}chartOverallWidth=960,chartOverallHeight=600,margin=30,legendWidth=150,legendLineHeight=16,legendMargin=2,d3.json("chartdata2.json").then(function(t){var e=t.races.map(t=>new Date(t.date)),i=Math.min.apply(null,e),l=Math.max.apply(null,e),o=d3.scaleTime().domain([i,l]).range([margin,chartOverallWidth-margin-legendWidth]),c=d3.scaleOrdinal(d3.schemeDark2);chartOverallHeight=t.competitors.length*legendLineHeight+margin;var d=d3.select("#chart").attr("width",chartOverallWidth).attr("height",chartOverallHeight).call(n);function s(t){compId=t.competitorId||t.id,d.selectAll("path.compLine").attr("opacity",.4),d.selectAll("path[data-compId='"+compId+"']").attr("stroke-width",4).attr("opacity",1),d.selectAll("g.legendEntry").attr("opacity",.4),d.selectAll("g.legendEntry[data-compId='"+compId+"']").attr("opacity",1),d.selectAll("g.legendEntry[data-compId='"+compId+"'] rect").attr("stroke",t=>c(t.id)),d.selectAll("circle").attr("opacity",.4),d.selectAll("circle[data-compId='"+compId+"']").attr("opacity",1)}function p(t){d.selectAll("path.compLine").attr("stroke-width",1.5),d.selectAll("path.compLine").attr("opacity",1),d.selectAll("g.legendEntry rect").attr("stroke","none"),tooltipGroup.attr("opacity",0).attr("transform","translate("+chartOverallWidth+","+chartOverallHeight+")"),d.selectAll("path.compLine").attr("opacity",1),d.selectAll("g.legendEntry").attr("opacity",1),d.selectAll("circle").attr("opacity",1)}var h=d3.select("#chart").selectAll("g.legendEntry").attr("transform","translate("+(chartOverallWidth-legendWidth)+","+(margin+legendMargin)+")").data(t.competitors).enter().append("g").attr("class","legendEntry").attr("data-compId",t=>t.id).attr("transform",function(t,e){var a=chartOverallWidth-legendWidth,r=e*legendLineHeight+legendMargin;return"translate("+a+","+r+")"}).attr("opacity",1).on("mouseover",s).on("mouseout",p);h.append("rect").attr("width",legendWidth-1).attr("height",legendLineHeight).attr("fill","none").attr("stroke-width",2),h.append("rect").attr("width",20-legendMargin).attr("height",legendLineHeight-2*legendMargin).attr("x",legendMargin).attr("y",legendMargin).style("fill",t=>c(t.id)).style("stroke-width",0),h.append("text").attr("x",20+legendMargin).attr("y",legendLineHeight-4).style("font-size","11px").style("font-family","sans-serif").text(function(t){return t.name});var g=d3.axisTop().scale(o);d3.select("#chart").append("g").attr("id","xAxisG").attr("transform","translate(0,20)").call(g),lineData=d3.line().x(e=>o(a(e,t))).y(e=>r(e,t)),d.selectAll("path.compLine").data(t.competitors).enter().append("path").attr("class","compLine").attr("d",e=>lineData(t.entries.filter(t=>t.competitorId===e.id))).attr("fill","none").attr("opacity",1).attr("stroke",t=>c(t.id)).attr("stroke-width",1).attr("stroke-linejoin","round").attr("stroke-linecap","round").attr("data-compId",t=>t.id).on("mouseover",s).on("mouseout",p),d.selectAll("circle").data(t.entries).enter().append("circle").attr("r",3).attr("cy",e=>r(e,t)).attr("cx",e=>o(a(e,t))).attr("data-compId",t=>t.competitorId).attr("fill",t=>c(t.competitorId)).on("mouseover",function(e){tooltipGroup.attr("transform","translate("+o(a(e,t))+","+(r(e,t)-legendLineHeight)+")").attr("opacity",1).select("text").selectAll("*").remove(),tooltipGroup.select("text").append("tspan").text("Race place: "+e.racePlace),tooltipGroup.select("text").append("tspan").attr("x",5).attr("y",2*legendLineHeight-5).text("Series points: "+e.seriesPoints),s(e)}).on("mouseout",p),tooltipGroup=d.append("g").attr("opacity",0),tooltipGroup.append("rect").attr("width",120).attr("height",2*legendLineHeight).attr("fill","white").attr("fill-opacity",".7"),tooltipGroup.append("text").attr("x",5).attr("y",legendLineHeight-5).style("font-size","11px").style("font-family","sans-serif")});function n(t){var e=d3.select(t.node().parentNode),a=parseInt(t.style("width")),r=parseInt(t.style("height")),n=a/r;function i(){var a=parseInt(e.style("width"));t.attr("width",a),t.attr("height",Math.round(a/n))}t.attr("viewBox","0 0 "+a+" "+r).attr("perserveAspectRatio","xMinYMid").call(i),d3.select(window).on("resize."+e.attr("id"),i)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TYWlsU2NvcmVzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1NhaWxTY29yZXMvLi9TY3JpcHRzL3Nlcmllc0NoYXJ0LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnZXREYXRlIiwicmVzdWx0IiwiYWxsRGF0YSIsInRoaXNSYWNlIiwicmFjZXMiLCJmaW5kIiwiaWQiLCJyYWNlSWQiLCJyYWNlc1RoaXNEYXRlIiwiZmlsdGVyIiwiZGF0ZSIsImxlbmd0aCIsIkRhdGUiLCJvcmRlciIsImZpbmRJbmRleCIsImdldFRpbWUiLCJnZXRZIiwibWF4U2NvcmUiLCJNYXRoIiwibWF4IiwiZW50cmllcyIsImUiLCJtYXAiLCJzZXJpZXNQb2ludHMiLCJtaW5TY29yZSIsIm1pbiIsInJhdGlvIiwibWFyZ2luIiwiY2hhcnRPdmVyYWxsSGVpZ2h0IiwiY2hhcnRPdmVyYWxsV2lkdGgiLCJsZWdlbmRXaWR0aCIsImxlZ2VuZExpbmVIZWlnaHQiLCJsZWdlbmRNYXJnaW4iLCJkMyIsImpzb24iLCJ0aGVuIiwiZGF0YSIsImRhdGVzIiwiZWFybGllc3REYXRlIiwiYXBwbHkiLCJsYXRlc3REYXRlIiwieFNjYWxlIiwic2NhbGVUaW1lIiwiZG9tYWluIiwicmFuZ2UiLCJjb2xvciIsInNjYWxlT3JkaW5hbCIsInNjaGVtZURhcmsyIiwiY29tcGV0aXRvcnMiLCJzdmdFbGVtZW50Iiwic2VsZWN0IiwiYXR0ciIsInJlc3BvbnNpdmVmeSIsIm9uTW91c2VPdmVyIiwiY29tcElkIiwiY29tcGV0aXRvcklkIiwic2VsZWN0QWxsIiwib25Nb3VzZU91dCIsInRvb2x0aXBHcm91cCIsImxlZ2VuZCIsImVudGVyIiwiYXBwZW5kIiwieCIsInkiLCJvbiIsInN0eWxlIiwidGV4dCIsInhBeGlzIiwiYXhpc1RvcCIsInNjYWxlIiwibGluZURhdGEiLCJsaW5lIiwicmVtb3ZlIiwicmFjZVBsYWNlIiwic3ZnIiwiY29udGFpbmVyIiwibm9kZSIsInBhcmVudE5vZGUiLCJ3aWR0aCIsInBhcnNlSW50IiwiaGVpZ2h0IiwiYXNwZWN0IiwicmVzaXplIiwidGFyZ2V0V2lkdGgiLCJyb3VuZCIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IjJCQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUEyQ0EsT0F0Q0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FDQUssY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElBQUFOLEtBTUFaLEVBQUFtQixFQUFBLFNBQUFqQixHQUNBWSxPQUFBQyxlQUFBYixFQUFBLGNBQWlEa0IsT0FBQSxLQUlqRHBCLEVBQUFxQixFQUFBLFNBQUFsQixHQUNBLElBQUFTLEVBQUFULEtBQUFtQixXQUNBLFdBQTJCLE9BQUFuQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFF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QUNBVixLQUFBLE9BQ0FBLEtBQUEsSUFBQXBCLGlCQUFBLEdBQ0FrQyxNQUFBLG9CQUNBQSxNQUFBLDhCQTVNQSxTQUFBYixFQUFBc0IsR0FFQSxJQUFBQyxFQUFBMUMsR0FBQWlCLE9BQUF3QixFQUFBRSxPQUFBQyxZQUNBQyxFQUFBQyxTQUFBTCxFQUFBVCxNQUFBLFVBQ0FlLEVBQUFELFNBQUFMLEVBQUFULE1BQUEsV0FDQWdCLEVBQUFILEVBQUFFLEVBZUEsU0FBQUUsSUFDQSxJQUFBQyxFQUFBSixTQUFBSixFQUFBVixNQUFBLFVBQ0FTLEVBQUF2QixLQUFBLFFBQUFnQyxHQUNBVCxFQUFBdkIsS0FBQSxTQUFBakMsS0FBQWtFLE1BQUFELEVBQUFGLElBZEFQLEVBQUF2QixLQUFBLGlCQUFBMkIsRUFBQSxJQUFBRSxHQUNBN0IsS0FBQSxrQ0FDQXpFLEtBQUF3RyxHQU1BakQsR0FBQWlCLE9BQUFtQyxRQUFBckIsR0FBQSxVQUFBVyxFQUFBeEIsS0FBQSxNQUFBK0IiLCJmaWxlIjoic2VyaWVzQ2hhcnQuYnVpbGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvanMvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIu+7v1xyXG5jaGFydE92ZXJhbGxXaWR0aCA9IDk2MDtcclxuY2hhcnRPdmVyYWxsSGVpZ2h0ID0gNjAwO1xyXG5tYXJnaW4gPSAzMDtcclxubGVnZW5kV2lkdGggPSAxNTA7XHJcbmxlZ2VuZExpbmVIZWlnaHQgPSAxNjtcclxubGVnZW5kTWFyZ2luID0gMjtcclxuXHJcbmQzLmpzb24oXCJjaGFydGRhdGEyLmpzb25cIikudGhlbihwcm9jZXNzQ2hhcnREYXRhKTtcclxuXHJcbmZ1bmN0aW9uIGdldERhdGUocmVzdWx0LCBhbGxEYXRhKSB7XHJcbiAgICB2YXIgdGhpc1JhY2UgPSBhbGxEYXRhLnJhY2VzLmZpbmQociA9PiByLmlkID09PSByZXN1bHQucmFjZUlkKTtcclxuICAgIHZhciByYWNlc1RoaXNEYXRlID0gYWxsRGF0YS5yYWNlcy5maWx0ZXIociA9PiByLmRhdGUgPT09IHRoaXNSYWNlLmRhdGUpO1xyXG4gICAgaWYgKHRoaXNSYWNlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzUmFjZS5kYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgb3JkZXIgPSByYWNlc1RoaXNEYXRlLmZpbmRJbmRleChyID0+IHIuaWQgPT09IHRoaXNSYWNlLmlkKTtcclxuICAgIHJldHVybiBuZXcgRGF0ZShuZXcgRGF0ZSh0aGlzUmFjZS5kYXRlKS5nZXRUaW1lKClcclxuICAgICAgICArIChvcmRlciAqIDI0ICogNjAgKiA2MCAqIDEwMDAgLyByYWNlc1RoaXNEYXRlLmxlbmd0aCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRZKHJlc3VsdCwgYWxsRGF0YSkge1xyXG4gICAgdmFyIG1heFNjb3JlID0gTWF0aC5tYXgoLi4uYWxsRGF0YS5lbnRyaWVzXHJcbiAgICAgICAgLmZpbHRlcihlID0+IGUucmFjZUlkID09PSByZXN1bHQucmFjZUlkKVxyXG4gICAgICAgIC5tYXAoZSA9PiBlLnNlcmllc1BvaW50cykpO1xyXG4gICAgdmFyIG1pblNjb3JlID0gTWF0aC5taW4oLi4uYWxsRGF0YS5lbnRyaWVzXHJcbiAgICAgICAgLmZpbHRlcihlID0+IGUucmFjZUlkID09PSByZXN1bHQucmFjZUlkXHJcbiAgICAgICAgICAgICYmIGUuc2VyaWVzUG9pbnRzICE9PSAwKVxyXG4gICAgICAgIC5tYXAoZSA9PiBlLnNlcmllc1BvaW50cykpO1xyXG4gICAgdmFyIHJhdGlvID0gKHJlc3VsdC5zZXJpZXNQb2ludHMgLSBtaW5TY29yZSkgLyAobWF4U2NvcmUgLSBtaW5TY29yZSk7XHJcbiAgICBpZiAocmVzdWx0LnNlcmllc1BvaW50cyA9PT0gMCkge1xyXG4gICAgICAgIHJhdGlvID0gMTtcclxuICAgIH1cclxuICAgIHJldHVybiBtYXJnaW4gKyAocmF0aW8gKiAoY2hhcnRPdmVyYWxsSGVpZ2h0IC0gbWFyZ2luIC0gbWFyZ2luKSk7XHJcbn1cclxuXHJcbmNvbnN0IHVuaXF1ZSA9ICh2YWx1ZSwgaW5kZXgsIHNlbGYpID0+IHtcclxuICAgIHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzcG9uc2l2ZWZ5KHN2Zykge1xyXG4gICAgLy8gZ2V0IGNvbnRhaW5lciArIHN2ZyBhc3BlY3QgcmF0aW9cclxuICAgIHZhciBjb250YWluZXIgPSBkMy5zZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKSxcclxuICAgICAgICB3aWR0aCA9IHBhcnNlSW50KHN2Zy5zdHlsZShcIndpZHRoXCIpKSxcclxuICAgICAgICBoZWlnaHQgPSBwYXJzZUludChzdmcuc3R5bGUoXCJoZWlnaHRcIikpLFxyXG4gICAgICAgIGFzcGVjdCA9IHdpZHRoIC8gaGVpZ2h0O1xyXG5cclxuICAgIC8vIGFkZCB2aWV3Qm94IGFuZCBwcmVzZXJ2ZUFzcGVjdFJhdGlvIHByb3BlcnRpZXMsXHJcbiAgICAvLyBhbmQgY2FsbCByZXNpemUgc28gdGhhdCBzdmcgcmVzaXplcyBvbiBpbml0YWwgcGFnZSBsb2FkXHJcbiAgICBzdmcuYXR0cihcInZpZXdCb3hcIiwgXCIwIDAgXCIgKyB3aWR0aCArIFwiIFwiICsgaGVpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFwicGVyc2VydmVBc3BlY3RSYXRpb1wiLCBcInhNaW5ZTWlkXCIpXHJcbiAgICAgICAgLmNhbGwocmVzaXplKTtcclxuXHJcbiAgICAvLyB0byByZWdpc3RlciBtdWx0aXBsZSBsaXN0ZW5lcnMgZm9yIHNhbWUgZXZlbnQgdHlwZSwgXHJcbiAgICAvLyB5b3UgbmVlZCB0byBhZGQgbmFtZXNwYWNlLCBpLmUuLCAnY2xpY2suZm9vJ1xyXG4gICAgLy8gbmVjZXNzYXJ5IGlmIHlvdSBjYWxsIGludm9rZSB0aGlzIGZ1bmN0aW9uIGZvciBtdWx0aXBsZSBzdmdzXHJcbiAgICAvLyBhcGkgZG9jczogaHR0cHM6Ly9naXRodWIuY29tL21ib3N0b2NrL2QzL3dpa2kvU2VsZWN0aW9ucyNvblxyXG4gICAgZDMuc2VsZWN0KHdpbmRvdykub24oXCJyZXNpemUuXCIgKyBjb250YWluZXIuYXR0cihcImlkXCIpLCByZXNpemUpO1xyXG5cclxuICAgIC8vIGdldCB3aWR0aCBvZiBjb250YWluZXIgYW5kIHJlc2l6ZSBzdmcgdG8gZml0IGl0XHJcbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldFdpZHRoID0gcGFyc2VJbnQoY29udGFpbmVyLnN0eWxlKFwid2lkdGhcIikpO1xyXG4gICAgICAgIHN2Zy5hdHRyKFwid2lkdGhcIiwgdGFyZ2V0V2lkdGgpO1xyXG4gICAgICAgIHN2Zy5hdHRyKFwiaGVpZ2h0XCIsIE1hdGgucm91bmQodGFyZ2V0V2lkdGggLyBhc3BlY3QpKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q29tcE5hbWUoaWQsIGNvbXBldGl0b3JzKSB7XHJcbiAgICByZXR1cm4gY29tcGV0aXRvcnMuZmluZChjID0+IGMuaWQgPT09IGlkKS5uYW1lO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzQ2hhcnREYXRhKGRhdGEpIHtcclxuICAgIHZhciBkYXRlcyA9IGRhdGEucmFjZXMubWFwKHIgPT4gbmV3IERhdGUoci5kYXRlKSk7XHJcbiAgICB2YXIgZWFybGllc3REYXRlID0gTWF0aC5taW4uYXBwbHkobnVsbCwgZGF0ZXMpO1xyXG4gICAgdmFyIGxhdGVzdERhdGUgPSBNYXRoLm1heC5hcHBseShudWxsLCBkYXRlcyk7XHJcbiAgICB2YXIgeFNjYWxlID0gZDMuc2NhbGVUaW1lKClcclxuICAgICAgICAuZG9tYWluKFtlYXJsaWVzdERhdGUsIGxhdGVzdERhdGVdKVxyXG4gICAgICAgIC5yYW5nZShbbWFyZ2luLCBjaGFydE92ZXJhbGxXaWR0aCAtIG1hcmdpbiAtIGxlZ2VuZFdpZHRoXSk7XHJcbiAgICB2YXIgY29sb3IgPSBkMy5zY2FsZU9yZGluYWwoZDMuc2NoZW1lRGFyazIpO1xyXG5cclxuICAgIGNoYXJ0T3ZlcmFsbEhlaWdodCA9IGRhdGEuY29tcGV0aXRvcnMubGVuZ3RoICogbGVnZW5kTGluZUhlaWdodCArIG1hcmdpbjtcclxuXHJcbiAgICB2YXIgc3ZnRWxlbWVudCA9IGQzLnNlbGVjdChcIiNjaGFydFwiKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgY2hhcnRPdmVyYWxsV2lkdGgpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2hhcnRPdmVyYWxsSGVpZ2h0KVxyXG4gICAgICAgIC5jYWxsKHJlc3BvbnNpdmVmeSk7XHJcblxyXG4gICAgZnVuY3Rpb24gb25Nb3VzZU92ZXIoZCkge1xyXG4gICAgICAgIGNvbXBJZCA9IGQuY29tcGV0aXRvcklkIHx8IGQuaWQ7XHJcbiAgICAgICAgc3ZnRWxlbWVudFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwicGF0aC5jb21wTGluZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgLjQpO1xyXG4gICAgICAgIHN2Z0VsZW1lbnRcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInBhdGhbZGF0YS1jb21wSWQ9J1wiICsgY29tcElkICsgXCInXVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCA0KVxyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSk7XHJcbiAgICAgICAgc3ZnRWxlbWVudFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwiZy5sZWdlbmRFbnRyeVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgLjQpO1xyXG4gICAgICAgIHN2Z0VsZW1lbnRcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcImcubGVnZW5kRW50cnlbZGF0YS1jb21wSWQ9J1wiICsgY29tcElkICsgXCInXVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSk7XHJcbiAgICAgICAgc3ZnRWxlbWVudFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwiZy5sZWdlbmRFbnRyeVtkYXRhLWNvbXBJZD0nXCIgKyBjb21wSWQgKyBcIiddIHJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgKGMpID0+IGNvbG9yKGMuaWQpKTtcclxuICAgICAgICBzdmdFbGVtZW50LnNlbGVjdEFsbChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgLjQpO1xyXG4gICAgICAgIHN2Z0VsZW1lbnRcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcImNpcmNsZVtkYXRhLWNvbXBJZD0nXCIgKyBjb21wSWQgKyBcIiddXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKTtcclxuXHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBvbk1vdXNlT3ZlclJhY2UoZCkge1xyXG4gICAgICAgIHRvb2x0aXBHcm91cFxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHhTY2FsZShnZXREYXRlKGQsIGRhdGEpKSArIFwiLFwiXHJcbiAgICAgICAgICAgICAgICArIChnZXRZKGQsIGRhdGEpIC0gbGVnZW5kTGluZUhlaWdodCkgKyBcIilcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpXHJcbiAgICAgICAgICAgIC5zZWxlY3QoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCIqXCIpXHJcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcclxuICAgICAgICB0b29sdGlwR3JvdXBcclxuICAgICAgICAgICAgLnNlbGVjdChcInRleHRcIilcclxuICAgICAgICAgICAgLmFwcGVuZChcInRzcGFuXCIpXHJcbiAgICAgICAgICAgIC50ZXh0KFwiUmFjZSBwbGFjZTogXCIgKyBkLnJhY2VQbGFjZSk7XHJcbiAgICAgICAgdG9vbHRpcEdyb3VwXHJcbiAgICAgICAgICAgIC5zZWxlY3QoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJ0c3BhblwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgNSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChsZWdlbmRMaW5lSGVpZ2h0ICogMikgLSA1KVxyXG4gICAgICAgICAgICAudGV4dChcIlNlcmllcyBwb2ludHM6IFwiICsgZC5zZXJpZXNQb2ludHMpO1xyXG4gICAgICAgIG9uTW91c2VPdmVyKGQpO1xyXG5cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG9uTW91c2VPdXQoZCkge1xyXG4gICAgICAgIHN2Z0VsZW1lbnRcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInBhdGguY29tcExpbmVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMS41KTtcclxuICAgICAgICBzdmdFbGVtZW50XHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJwYXRoLmNvbXBMaW5lXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKTtcclxuICAgICAgICBzdmdFbGVtZW50XHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJnLmxlZ2VuZEVudHJ5IHJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJub25lXCIpO1xyXG4gICAgICAgIHRvb2x0aXBHcm91cFxyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMClcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBjaGFydE92ZXJhbGxXaWR0aCArIFwiLFwiXHJcbiAgICAgICAgICAgICAgICArIGNoYXJ0T3ZlcmFsbEhlaWdodCArIFwiKVwiKTtcclxuXHJcbiAgICAgICAgc3ZnRWxlbWVudFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwicGF0aC5jb21wTGluZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSk7XHJcbiAgICAgICAgc3ZnRWxlbWVudFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwiZy5sZWdlbmRFbnRyeVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSk7XHJcbiAgICAgICAgc3ZnRWxlbWVudC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB2YXIgbGVnZW5kID0gZDMuc2VsZWN0KFwiI2NoYXJ0XCIpXHJcbiAgICAgICAgLnNlbGVjdEFsbChcImcubGVnZW5kRW50cnlcIilcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChjaGFydE92ZXJhbGxXaWR0aCAtIGxlZ2VuZFdpZHRoKSArIFwiLFwiICsgKG1hcmdpbiArIGxlZ2VuZE1hcmdpbikgKyBcIilcIilcclxuICAgICAgICAuZGF0YShkYXRhLmNvbXBldGl0b3JzKVxyXG4gICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwibGVnZW5kRW50cnlcIilcclxuICAgICAgICAuYXR0cihcImRhdGEtY29tcElkXCIsIGQgPT4gZC5pZClcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgICAgICB2YXIgeCA9IGNoYXJ0T3ZlcmFsbFdpZHRoIC0gbGVnZW5kV2lkdGg7XHJcbiAgICAgICAgICAgIHZhciB5ID0gKGkgKiBsZWdlbmRMaW5lSGVpZ2h0KSArIGxlZ2VuZE1hcmdpbjtcclxuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHggKyAnLCcgKyB5ICsgJyknO1xyXG4gICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpXHJcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIG9uTW91c2VPdmVyKVxyXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIG9uTW91c2VPdXQpO1xyXG4gICAgbGVnZW5kLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIGxlZ2VuZFdpZHRoIC0gMSlcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBsZWdlbmRMaW5lSGVpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcclxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAyKTtcclxuICAgIGxlZ2VuZC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgMjAgLSBsZWdlbmRNYXJnaW4pXHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGxlZ2VuZExpbmVIZWlnaHQgLSAyICogbGVnZW5kTWFyZ2luKVxyXG4gICAgICAgIC5hdHRyKFwieFwiLCBsZWdlbmRNYXJnaW4pXHJcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGxlZ2VuZE1hcmdpbilcclxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAoYykgPT4gY29sb3IoYy5pZCkpXHJcbiAgICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAwKTtcclxuICAgIGxlZ2VuZC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgIC5hdHRyKCd4JywgMjAgKyBsZWdlbmRNYXJnaW4pXHJcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGxlZ2VuZExpbmVIZWlnaHQgLSA0KVxyXG4gICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjExcHhcIilcclxuICAgICAgICAuc3R5bGUoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcclxuICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lOyB9KTtcclxuXHJcbiAgICB2YXIgeEF4aXMgPSBkMy5heGlzVG9wKCkuc2NhbGUoeFNjYWxlKTtcclxuICAgIGQzLnNlbGVjdChcIiNjaGFydFwiKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJpZFwiLCBcInhBeGlzR1wiKVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsMjApXCIpLmNhbGwoeEF4aXMpO1xyXG5cclxuICAgIGxpbmVEYXRhID0gZDMubGluZSgpXHJcbiAgICAgICAgLngoZCA9PiB4U2NhbGUoZ2V0RGF0ZShkLCBkYXRhKSkpXHJcbiAgICAgICAgLnkoZCA9PiBnZXRZKGQsIGRhdGEpKTtcclxuXHJcbiAgICBzdmdFbGVtZW50XHJcbiAgICAgICAgLnNlbGVjdEFsbChcInBhdGguY29tcExpbmVcIilcclxuICAgICAgICAuZGF0YShkYXRhLmNvbXBldGl0b3JzKVxyXG4gICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgLmFwcGVuZChcInBhdGhcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29tcExpbmVcIilcclxuICAgICAgICAuYXR0cihcImRcIiwgZCA9PiBsaW5lRGF0YShkYXRhLmVudHJpZXMuZmlsdGVyKGUgPT4gZS5jb21wZXRpdG9ySWQgPT09IGQuaWQpKSlcclxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXHJcbiAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpXHJcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgZCA9PiBjb2xvcihkLmlkKSlcclxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKVxyXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlLWxpbmVqb2luXCIsIFwicm91bmRcIilcclxuICAgICAgICAuYXR0cihcInN0cm9rZS1saW5lY2FwXCIsIFwicm91bmRcIilcclxuICAgICAgICAuYXR0cihcImRhdGEtY29tcElkXCIsIGQgPT4gZC5pZClcclxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgb25Nb3VzZU92ZXIpXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgb25Nb3VzZU91dCk7XHJcblxyXG4gICAgc3ZnRWxlbWVudC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcclxuICAgICAgICAuZGF0YShkYXRhLmVudHJpZXMpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgLmF0dHIoXCJyXCIsIDMpXHJcbiAgICAgICAgLmF0dHIoXCJjeVwiLCBkID0+IGdldFkoZCwgZGF0YSkpXHJcbiAgICAgICAgLmF0dHIoXCJjeFwiLCBkID0+IHhTY2FsZShnZXREYXRlKGQsIGRhdGEpKSlcclxuICAgICAgICAuYXR0cihcImRhdGEtY29tcElkXCIsIGQgPT4gZC5jb21wZXRpdG9ySWQpXHJcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGQgPT4gY29sb3IoZC5jb21wZXRpdG9ySWQpKVxyXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBvbk1vdXNlT3ZlclJhY2UpXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgb25Nb3VzZU91dCk7XHJcblxyXG4gICAgdG9vbHRpcEdyb3VwID0gc3ZnRWxlbWVudFxyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgdG9vbHRpcEdyb3VwLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIDEyMClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBsZWdlbmRMaW5lSGVpZ2h0ICogMilcclxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJ3aGl0ZVwiKVxyXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIFwiLjdcIik7XHJcbiAgICB0b29sdGlwR3JvdXAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC5hdHRyKCd4JywgNSlcclxuICAgICAgICAuYXR0cihcInlcIiwgbGVnZW5kTGluZUhlaWdodCAtIDUpXHJcbiAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMTFweFwiKVxyXG4gICAgICAgIC5zdHlsZShcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKTtcclxuXHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=