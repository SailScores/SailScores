var SailScores=function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/js/",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"init",function(){return i}),n.d(t,"loadSeriesOptions",function(){return a}),n.d(t,"loadFleet",function(){return l}),n.d(t,"raceStateChanged",function(){return c}),n.d(t,"completeCompCreate",function(){return u}),n.d(t,"completeCompCreateFailed",function(){return d}),n.d(t,"hideAlert",function(){return s}),n.d(t,"moveUp",function(){return m}),n.d(t,"moveDown",function(){return p}),n.d(t,"deleteResult",function(){return f}),n.d(t,"confirmDelete",function(){return v}),n.d(t,"hideScoreButtonFooter",function(){return h}),n.d(t,"addNewCompetitorById",function(){return g}),n.d(t,"calculatePlaces",function(){return b});const o="No Code";function r(e){const t=e||event;return/textarea/i.test(t.srcElement.tagName)||13!==(e.keyCode||e.which||e.charCode||0)}function i(){document.querySelector("form").onkeypress=r,$("#raceform").submit(function(e){e.preventDefault();!function(e){for(var t=document.getElementById("results").getElementsByTagName("li"),n=1;n<t.length;n++){const r=(n-1).toString();var o=document.createElement("input");o.type="hidden",o.name="Scores["+r+"].competitorId",o.value=t[n].getAttribute("data-competitorId"),e.appendChild(o),(o=document.createElement("input")).type="hidden",o.name="Scores["+r+"].place",A(t[n])&&(o.value=t[n].getAttribute("data-place")),e.appendChild(o),(o=document.createElement("input")).type="hidden",o.name="Scores["+r+"].code",o.value=D(t[n]),e.appendChild(o),(o=document.createElement("input")).type="hidden",o.name="Scores["+r+"].codePointsString",o.value=x(t[n]),e.appendChild(o)}}(this),this.submit(),function(e){e.find("[name^=Scores]").remove()}(this)}),l(),a(),b(),$("#submitButton").prop("disabled",!1),$("#submitDisabledMessage").prop("hidden",!0)}function a(){!function(e,t){e&&t&&$.getJSON("/api/Series",{clubId:e,date:t},function(e){N=e,function(){let e=$("#seriesIds");var t=e.val();e.empty(),$.each(N,function(t,n){let o=n;e.append($("<option></option>").attr("value",o.id.toString()).text(o.name))}),e.selectpicker("destroy"),e.selectpicker(),e.val(t),e.selectpicker("refresh")}()})}($("#clubId").val(),$("#date").val())}function l(){let e=$("#clubId").val(),t=$("#fleetId").val(),n=document.getElementById("fleetId"),o=n.options[n.selectedIndex].getAttribute("data-boat-class-id");o&&$("#createCompBoatClassSelect").val(o),$("#createCompFleetId").val(t),I(e,t)}function c(){let e=$("#raceState").val();"2"===e&&($("#weatherIcon").val("Select..."),$("#weatherIcon").selectpicker("refresh"),$("#weatherDescription").val(null),$("#windSpeed").val(null),$("#windGust").val(null),$("#windDirection").val(null),$("#temperature").val(null),$("#humidity").val(null),$("#cloudcover").val(null)),"1"===e&&function(){var e=$("#clubInitials").val();$.getJSON("/"+e+"/weather/current/",{},function(e){console.log(e),e.icon&&$("#weatherIcon").val(null)&&($("#weatherIcon").val(e.icon),$("#weatherIcon").selectpicker("refresh")),e.description&&$("#weatherDescription").val(null)&&$("#weatherDescription").val(e.description),e.windSpeed&&$("#windSpeed").val(null)&&$("#windSpeed").val(e.windSpeed),e.windGust&&$("#windGust").val(null)&&$("#windGust").val(e.windGust),e.windDirection&&$("#windDirection").val(null)&&$("#windDirection").val(e.windDirection),e.temperature&&$("#temperature").val(null)&&$("#temperature").val(e.temperature),e.humidity&&$("#humidity").val(null)&&$("#humidity").val(e.humidity),e.cloudCoverPercent&&$("#cloudCover").val(null)&&$("#cloudCover").val(e.cloudCoverPercent)})}()}function u(){I($("#clubId").val(),$("#fleetId").val()),$("#createCompetitor").modal("hide")}function d(){$("#compCreateAlert").show()}function s(){$("#compCreateAlert").hide()}function m(){var e=event.target,t=$(e).closest("li");t.prev().insertAfter(t),b()}function p(){var e=event.target,t=$(e).closest("li");t.next().insertBefore(t),b()}function f(){var e=$("#deleteConfirm"),t=e.find("#compIdToDelete").val();$("#results").find(`[data-competitorid='${t}']`).remove(),b(),e.modal("hide")}function v(){var e=event.target,t=$(e).closest("li"),n=t.data("competitorid"),o=t.find(".competitor-name").text(),r=$("#deleteConfirm");r.find("#competitorNameToDelete").text(o),r.find("#compIdToDelete").val(n),r.show()}function h(){$("#scoreButtonFooter").hide()}function g(e){y(S.find(t=>t.id===e))}function y(e){var t=document.getElementById("results"),n=document.getElementById("competitorTemplate").cloneNode(!0);n.id=e.id.toString(),n.setAttribute("data-competitorId",e.id.toString());var o=n.getElementsByClassName("competitor-name")[0];o.appendChild(document.createTextNode(e.name)),(o=n.getElementsByClassName("sail-number")[0]).appendChild(document.createTextNode(e.sailNumber)),e.alternativeSailNumber&&((o=n.getElementsByClassName("alt-sail-number")[0]).appendChild(document.createTextNode(" ("+e.alternativeSailNumber+")")),o.style.display=""),(o=n.getElementsByClassName("race-place")[0]).appendChild(document.createTextNode((0).toString()));for(var r=n.getElementsByClassName("delete-button"),i=0;i<r.length;i++)r[i].setAttribute("data-competitorId",e.id.toString());n.style.display="",t.appendChild(n),b(),$("html, body").animate({scrollTop:$(n).offset().top-150},300),$("#newCompetitor").val(""),E(),$("#scoreButtonDiv").empty(),S.forEach(e=>{let t="btn ",n="";C(e)?t+="btn-primary":(t+="btn-outline-primary",n="window.SailScores.addNewCompetitorById('"+e.id+"')"),$("#scoreButtonDiv").append('<button class="'+t+' data-id="'+e.id+'" onclick="'+n+'" > '+(e.sailNumber||e.alternativeSailNumber)+" </button>")})}function b(){for(var e=document.getElementById("results").getElementsByTagName("li"),t=1,n=1,o=e.length;n<o;n++){var r=e[n].getElementsByClassName("race-place")[0];e[n].setAttribute("data-place",n.toString());var i=e[n].getAttribute("data-originalScore");"competitorTemplate"!=r.id&&(A(e[n])&&"0"!==i?(r.textContent=t.toString(),e[n].setAttribute("data-place",t.toString()),t++):(r.textContent=D(e[n]),e[n].removeAttribute("data-place")));var a=e[n].getElementsByClassName("code-points")[0];T(e[n])?a.style.display="":(a.style.display="none",a.value="")}}function C(e){for(var t=document.getElementById("results").getElementsByTagName("li"),n=0,o=t.length;n<o;n++)if(t[n].getAttribute("data-competitorId")===e.id.toString())return!0;return!1}var S,w,N;function I(e,t){e&&t&&$.getJSON("/api/Competitors",{clubId:e,fleetId:t},function(e){S=e,E(),function(){$("#scoreButtonDiv").empty(),S&&S.length&&S.length<21?$("#scoreButtonFooter").show():$("#scoreButtonFooter").hide();S.forEach(e=>{let t="btn ",n="";C(e)?t+="btn-primary":(t+="btn-outline-primary",n="window.SailScores.addNewCompetitorById('"+e.id+"')"),$("#scoreButtonDiv").append('<button class="'+t+' data-id="'+e.id+'" onclick="'+n+'" > '+(e.sailNumber||e.alternativeSailNumber)+" </button>")})}()})}var B=!1;function E(){w=function(){const e=[];return console.debug("checking for comps in results"),S.forEach(t=>{if(!C(t)){let n={value:t.sailNumber+" - "+t.name,data:t};t.alternativeSailNumber&&(n.value=t.sailNumber+" ( "+t.alternativeSailNumber+" ) - "+t.name),e.push(n)}}),e}(),B&&$("#newCompetitor").autocomplete().dispose(),$("#newCompetitor").autocomplete({lookup:w,onSelect:function(e){y(e.data)},autoSelectFirst:!0,triggerSelectOnValidInput:!1,noCache:!0}),B=!0}function D(e){const t=e.getElementsByClassName("select-code")[0].value;return t===o?null:t}function x(e){const t=e.getElementsByClassName("code-points")[0].value;return t===o?null:t}function A(e){const t=e.getElementsByClassName("select-code")[0].value;return t===o||!!scoreCodes.filter(e=>e.name===t)[0].preserveResult}function T(e){const t=e.getElementsByClassName("select-code")[0].value;return t!==o&&"MAN"==scoreCodes.filter(e=>e.name===t)[0].formula}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,