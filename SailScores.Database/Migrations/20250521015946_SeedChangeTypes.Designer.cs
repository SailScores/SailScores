// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SailScores.Database;

#nullable disable

namespace SailScores.Database.Migrations
{
    [DbContext(typeof(SailScoresContext))]
    [Migration("20250521015946_SeedChangeTypes")]
    partial class SeedChangeTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SailScores.Database.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ArchiveAfter")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateUtc");

                    b.Property<DateTime>("CreatedLocalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateLocal");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PreviousVersion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegattaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<DateTime?>("UpdatedLocalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateLocal");

                    b.HasKey("Id");

                    b.HasIndex("RegattaId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("SailScores.Database.Entities.BoatClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("BoatClasses");
                });

            modelBuilder.Entity("SailScores.Database.Entities.ChangeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ChangeTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6c92ed8-1d15-4a1a-977f-6e59bd0160c7"),
                            Name = "Created"
                        },
                        new
                        {
                            Id = new Guid("ee49c9c4-d556-4cab-b740-a3baad9c73c9"),
                            Name = "Deleted"
                        },
                        new
                        {
                            Id = new Guid("153a8b2a-accf-404c-bb39-61db55f5ee1e"),
                            Name = "Activated"
                        },
                        new
                        {
                            Id = new Guid("87533c82-936d-44bb-8055-9292046a7b9e"),
                            Name = "Deactivated"
                        },
                        new
                        {
                            Id = new Guid("f2a0b1d4-3c5e-4f8b-9a7c-6d8e5f2b0c3d"),
                            Name = "Property Changed"
                        });
                });

            modelBuilder.Entity("SailScores.Database.Entities.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DefaultRaceDateOffset")
                        .HasColumnType("int");

                    b.Property<Guid?>("DefaultScoringSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initials")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Locale")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("ShowClubInResults")
                        .HasColumnType("bit");

                    b.Property<string>("StatisticsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("UseAdvancedFeatures")
                        .HasColumnType("bit");

                    b.Property<Guid?>("WeatherSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DefaultScoringSystemId");

                    b.HasIndex("WeatherSettingsId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("SailScores.Database.Entities.ClubRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Classes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubInitials")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ClubLocation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClubWebsite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Complete")
                        .HasColumnType("bit");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("ForTesting")
                        .HasColumnType("bit");

                    b.Property<bool?>("Hide")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RequestApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TestClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypicalDiscardRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VisibleClubId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ClubRequests");
                });

            modelBuilder.Entity("SailScores.Database.Entities.ClubSeasonStats", b =>
                {
                    b.Property<decimal?>("AverageCompetitorsPerRace")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubInitials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompetitorsStarted")
                        .HasColumnType("int");

                    b.Property<int?>("DistinctCompetitorsStarted")
                        .HasColumnType("int");

                    b.Property<int?>("DistinctDaysRaced")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRace")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastRace")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RaceCount")
                        .HasColumnType("int");

                    b.Property<string>("SeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SeasonStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeasonUrlName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ClubSeasonStats");
                });

            modelBuilder.Entity("SailScores.Database.Entities.ClubSequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NextValue")
                        .HasColumnType("int");

                    b.Property<string>("SequencePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SequenceSuffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SequenceType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubSequences");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Competitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternativeSailNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("BoatClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoatName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeClubName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("SailNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UrlId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UrlName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BoatClassId");

                    b.HasIndex("ClubId");

                    b.ToTable("Competitors");
                });

            modelBuilder.Entity("SailScores.Database.Entities.CompetitorActiveDates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EarliestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LatestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CompetitorActiveDates");
                });

            modelBuilder.Entity("SailScores.Database.Entities.CompetitorChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangeTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ChangeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("CompetitorId");

                    b.ToTable("CompetitorChanges");
                });

            modelBuilder.Entity("SailScores.Database.Entities.CompetitorFleet", b =>
                {
                    b.Property<Guid>("CompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FleetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompetitorId", "FleetId");

                    b.HasIndex("FleetId");

                    b.ToTable("CompetitorFleet");
                });

            modelBuilder.Entity("SailScores.Database.Entities.CompetitorForwarder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("OldClubInitials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldCompetitorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.ToTable("CompetitorForwarders");
                });

            modelBuilder.Entity("SailScores.Database.Entities.CompetitorRankStats", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("Place")
                        .HasColumnType("int");

                    b.Property<string>("SeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SeasonStart")
                        .HasColumnType("datetime2");

                    b.ToTable("CompetitorRankStats");
                });

            modelBuilder.Entity("SailScores.Database.Entities.CompetitorStatsSummary", b =>
                {
                    b.Property<double?>("AverageFinishRank")
                        .HasColumnType("float");

                    b.Property<int?>("BoatsBeat")
                        .HasColumnType("int");

                    b.Property<int?>("BoatsRacedAgainst")
                        .HasColumnType("int");

                    b.Property<int?>("DaysRaced")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastRacedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RaceCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SeasonEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SeasonStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeasonUrlName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CompetitorStatsSummary");
                });

            modelBuilder.Entity("SailScores.Database.Entities.DeletableInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompetitorDeletableInfo");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateUtc");

                    b.Property<DateTime>("CreatedLocalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateLocal");

                    b.Property<byte[]>("FileContents")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("PreviousVersion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegattaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SailScores.Database.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContents")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ImportedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Fleet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("FleetType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NickName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Fleets");
                });

            modelBuilder.Entity("SailScores.Database.Entities.FleetBoatClass", b =>
                {
                    b.Property<Guid>("FleetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoatClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FleetId", "BoatClassId");

                    b.HasIndex("BoatClassId");

                    b.ToTable("FleetBoatClass");
                });

            modelBuilder.Entity("SailScores.Database.Entities.HistoricalResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("HistoricalResults");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("FleetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<Guid?>("WeatherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("FleetId");

                    b.HasIndex("WeatherId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Regatta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("HideFromFrontPage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("PreferAlternateSailNumbers")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ScoringSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UrlName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("ScoringSystemId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Regattas");
                });

            modelBuilder.Entity("SailScores.Database.Entities.RegattaFleet", b =>
                {
                    b.Property<Guid>("RegattaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FleetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RegattaId", "FleetId");

                    b.HasIndex("FleetId");

                    b.ToTable("RegattaFleet");
                });

            modelBuilder.Entity("SailScores.Database.Entities.RegattaForwarder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("NewRegattaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OldClubInitials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldRegattaUrlName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldSeasonUrlName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewRegattaId");

                    b.ToTable("RegattaForwarders");
                });

            modelBuilder.Entity("SailScores.Database.Entities.RegattaSeries", b =>
                {
                    b.Property<Guid>("RegattaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RegattaId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("RegattaSeries");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("CodePoints")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Place")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("RaceId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("SailScores.Database.Entities.ScoreCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AdjustOtherScores")
                        .HasColumnType("bit");

                    b.Property<bool?>("CameToStart")
                        .HasColumnType("bit");

                    b.Property<bool?>("CountAsParticipation")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Discardable")
                        .HasColumnType("bit");

                    b.Property<bool?>("Finished")
                        .HasColumnType("bit");

                    b.Property<string>("Formula")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FormulaValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("PreserveResult")
                        .HasColumnType("bit");

                    b.Property<string>("ScoreLike")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ScoringSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Started")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ScoringSystemId");

                    b.ToTable("ScoreCodes");
                });

            modelBuilder.Entity("SailScores.Database.Entities.ScoringSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiscardPattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsSiteDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ParticipationPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("ParentSystemId");

                    b.ToTable("ScoringSystems");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Series", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("ExcludeFromCompetitorStats")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FleetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("HideDncDiscards")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsImportantSeries")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("PreferAlternativeSailNumbers")
                        .HasColumnType("bit");

                    b.Property<bool?>("ResultsLocked")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ScoringSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrendOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<string>("UrlName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("ScoringSystemId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("SailScores.Database.Entities.SeriesChartResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("SeriesChartResults");
                });

            modelBuilder.Entity("SailScores.Database.Entities.SeriesForwarder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("NewSeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OldClubInitials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldSeasonUrlName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldSeriesUrlName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewSeriesId");

                    b.ToTable("SeriesForwarders");
                });

            modelBuilder.Entity("SailScores.Database.Entities.SeriesRace", b =>
                {
                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SeriesId", "RaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("SeriesRace");
                });

            modelBuilder.Entity("SailScores.Database.Entities.SiteStats", b =>
                {
                    b.Property<string>("ClubInitials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastRaceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastRaceUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RaceCount")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreCount")
                        .HasColumnType("int");

                    b.ToTable("SiteStats");
                });

            modelBuilder.Entity("SailScores.Database.Entities.UserClubPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanEditAllClubs")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.HasKey("Id");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Weather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CloudCoverPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("Humidity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Icon")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal?>("TemperatureDegreesKelvin")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TemperatureString")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal?>("WindDirectionDegrees")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("WindDirectionString")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal?>("WindGustMeterPerSecond")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("WindGustString")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal?>("WindSpeedMeterPerSecond")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("WindSpeedString")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("SailScores.Database.Entities.WeatherSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TemperatureUnits")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WindSpeedUnits")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("WeatherSettings");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Announcement", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Regatta", null)
                        .WithMany("Announcements")
                        .HasForeignKey("RegattaId");
                });

            modelBuilder.Entity("SailScores.Database.Entities.BoatClass", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Club", null)
                        .WithMany("BoatClasses")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SailScores.Database.Entities.Club", b =>
                {
                    b.HasOne("SailScores.Database.Entities.ScoringSystem", "DefaultScoringSystem")
                        .WithMany("DefaultForClubs")
                        .HasForeignKey("DefaultScoringSystemId");

                    b.HasOne("SailScores.Database.Entities.WeatherSettings", "WeatherSettings")
                        .WithMany()
                        .HasForeignKey("WeatherSettingsId");

                    b.Navigation("DefaultScoringSystem");

                    b.Navigation("WeatherSettings");
                });

            modelBuilder.Entity("SailScores.Database.Entities.ClubSequence", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Club", "Club")
                        .WithMany("ClubSequences")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Competitor", b =>
                {
                    b.HasOne("SailScores.Database.Entities.BoatClass", "BoatClass")
                        .WithMany()
                        .HasForeignKey("BoatClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.Club", null)
                        .WithMany("Competitors")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoatClass");
                });

            modelBuilder.Entity("SailScores.Database.Entities.CompetitorChange", b =>
                {
                    b.HasOne("SailScores.Database.Entities.ChangeType", "ChangeType")
                        .WithMany()
                        .HasForeignKey("ChangeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.Competitor", null)
                        .WithMany("ChangeHistory")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeType");
                });

            modelBuilder.Entity("SailScores.Database.Entities.CompetitorFleet", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Competitor", "Competitor")
                        .WithMany("CompetitorFleets")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.Fleet", "Fleet")
                        .WithMany("CompetitorFleets")
                        .HasForeignKey("FleetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("SailScores.Database.Entities.CompetitorForwarder", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Competitor", "NewCompetitor")
                        .WithMany()
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewCompetitor");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Fleet", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Club", null)
                        .WithMany("Fleets")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SailScores.Database.Entities.FleetBoatClass", b =>
                {
                    b.HasOne("SailScores.Database.Entities.BoatClass", "BoatClass")
                        .WithMany()
                        .HasForeignKey("BoatClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.Fleet", "Fleet")
                        .WithMany("FleetBoatClasses")
                        .HasForeignKey("FleetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoatClass");

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("SailScores.Database.Entities.HistoricalResults", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Race", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Club", null)
                        .WithMany("Races")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.Fleet", "Fleet")
                        .WithMany()
                        .HasForeignKey("FleetId");

                    b.HasOne("SailScores.Database.Entities.Weather", "Weather")
                        .WithMany()
                        .HasForeignKey("WeatherId");

                    b.Navigation("Fleet");

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Regatta", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Club", null)
                        .WithMany("Regattas")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.ScoringSystem", "ScoringSystem")
                        .WithMany()
                        .HasForeignKey("ScoringSystemId");

                    b.HasOne("SailScores.Database.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScoringSystem");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SailScores.Database.Entities.RegattaFleet", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Fleet", "Fleet")
                        .WithMany()
                        .HasForeignKey("FleetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.Regatta", "Regatta")
                        .WithMany("RegattaFleet")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fleet");

                    b.Navigation("Regatta");
                });

            modelBuilder.Entity("SailScores.Database.Entities.RegattaForwarder", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Regatta", "NewRegatta")
                        .WithMany()
                        .HasForeignKey("NewRegattaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewRegatta");
                });

            modelBuilder.Entity("SailScores.Database.Entities.RegattaSeries", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Regatta", "Regatta")
                        .WithMany("RegattaSeries")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regatta");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Score", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Competitor", "Competitor")
                        .WithMany("Scores")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.Race", "Race")
                        .WithMany("Scores")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("SailScores.Database.Entities.ScoreCode", b =>
                {
                    b.HasOne("SailScores.Database.Entities.ScoringSystem", null)
                        .WithMany("ScoreCodes")
                        .HasForeignKey("ScoringSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SailScores.Database.Entities.ScoringSystem", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Club", null)
                        .WithMany("ScoringSystems")
                        .HasForeignKey("ClubId");

                    b.HasOne("SailScores.Database.Entities.ScoringSystem", "ParentSystem")
                        .WithMany()
                        .HasForeignKey("ParentSystemId");

                    b.Navigation("ParentSystem");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Season", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Club", null)
                        .WithMany("Seasons")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SailScores.Database.Entities.Series", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Club", null)
                        .WithMany("Series")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.ScoringSystem", "ScoringSystem")
                        .WithMany()
                        .HasForeignKey("ScoringSystemId");

                    b.HasOne("SailScores.Database.Entities.Season", "Season")
                        .WithMany("Series")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScoringSystem");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SailScores.Database.Entities.SeriesChartResults", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("SailScores.Database.Entities.SeriesForwarder", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Series", "NewSeries")
                        .WithMany()
                        .HasForeignKey("NewSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewSeries");
                });

            modelBuilder.Entity("SailScores.Database.Entities.SeriesRace", b =>
                {
                    b.HasOne("SailScores.Database.Entities.Race", "Race")
                        .WithMany("SeriesRaces")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailScores.Database.Entities.Series", "Series")
                        .WithMany("RaceSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Club", b =>
                {
                    b.Navigation("BoatClasses");

                    b.Navigation("ClubSequences");

                    b.Navigation("Competitors");

                    b.Navigation("Fleets");

                    b.Navigation("Races");

                    b.Navigation("Regattas");

                    b.Navigation("ScoringSystems");

                    b.Navigation("Seasons");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Competitor", b =>
                {
                    b.Navigation("ChangeHistory");

                    b.Navigation("CompetitorFleets");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Fleet", b =>
                {
                    b.Navigation("CompetitorFleets");

                    b.Navigation("FleetBoatClasses");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Race", b =>
                {
                    b.Navigation("Scores");

                    b.Navigation("SeriesRaces");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Regatta", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("RegattaFleet");

                    b.Navigation("RegattaSeries");
                });

            modelBuilder.Entity("SailScores.Database.Entities.ScoringSystem", b =>
                {
                    b.Navigation("DefaultForClubs");

                    b.Navigation("ScoreCodes");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Season", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("SailScores.Database.Entities.Series", b =>
                {
                    b.Navigation("RaceSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
